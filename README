michaelbroid, shirlevy
michaelbroid (204906457), shir levy (316419423)

EX: 1

FILES:
README -- answers
osm.cpp -- the  code file
osm.h -- the headers file
Graph.png -- graph showing our results
Makefile -- in order to use 'make' on the project

REMARKS:


ANSWERS:

Q1:
Here are answers to theoreical questions:

1. the program uses the command mkdir to create a new directory named "welcome_dir_1"

2. the program uses the command mkdir to create a new directory named "welcome_dir_2" in
the directory "welcome_dir_1"

3.  using brk(NULL) the program is asking where its heap memory ends.

4. brk

5. the program creates a new file called "welcome_file.txt" inside the directory
"welcome_dir_2", a relative path argument will be resolved relative to the current working
 directory. the file is open for writing only, creates a file if it does not exist,
and truncates it's size to 0. the process is by the permission of "0666" - which enables
the owner, group and other to read and write but not to execute.

6. the program creates a new file called "localtime" inside the directory "etc", a
relative path argument will be resolved relative to the current working directory. the
file is open for reading only. The open() function shall return a file
descriptor for "/etc/localtime", allocated as described in File Descriptor Allocation. The
open file description is new, and therefore the file descriptor shall not share it with
any other process in the system. The FD_CLOEXEC file descriptor flag associated with the
new file descriptor shall be cleared unless the O_CLOEXEC flag is set in oflag.

7. the program asks for information regarding the open file "/etc/localtime" associated
with the file descriptor

8. the program asks for information regarding the open file "/etc/localtime"  associated
with the file descriptor

9. the program reads from the file descriptor of "/etc/localtime". it reads up the total
number of bytes from the specified file descriptor into the buffer. it attempts to read up
 to 4096 bytes from file descriptor fd into the buffer. the number of bytes read, 2388,
 is returned, and the file position is advanced by this number.

10. repositions the read/write file offset. Because of SEEK_CUR flag (whence), and -1506
offset, it repositions the file offset to that location, with the file descriptor of 4, as
 before (fd = 4).

11. after changing the position in the file, the program reads from the file descriptor of
 the current file up to 4096 bytes. the number of bytes read is 1506, and the file
 position is advanced accordingly.

12. closes the file descriptor of "/etc/localtime".

13. gets the file status of "welcome_file.txt".

14. writes up to 18 bytes from the buffer, starting at "welcome to OS-2023" to the file
referred to by the file descriptor "welcome_file.txt" (=3).

15 closes file "welcome_file.txt".

16. removes the file "welcome_file.txt" from directory "welcome_dir_1/welcome_dir_2"

17. trys to remove the directory "welcome_dir_2" from directory "welcome_dir_1" -
but fails because of the use in command "unlink".

18. uses rmdir to remove the directory "welcome_dir_2" from directory "welcome_dir_1".

19. trys to remove the directory "welcome_dir_1" - because of the use in command "unlink"
- and so gets an error.

20. uses rmdir to remove the directory "welcome_dir_1".

21. uses "exit_group(0)" to exit all the threads in the process.




